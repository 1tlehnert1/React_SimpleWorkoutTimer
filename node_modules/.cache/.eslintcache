[{"/Users/timlehnert/Desktop/13-workout-timer/src/index.js":"1","/Users/timlehnert/Desktop/13-workout-timer/src/App.js":"2","/Users/timlehnert/Desktop/13-workout-timer/src/Calculator.js":"3","/Users/timlehnert/Desktop/13-workout-timer/src/ToggleSounds.js":"4"},{"size":254,"mtime":1685774874000,"results":"5","hashOfConfig":"6"},{"size":1457,"mtime":1693944633042,"results":"7","hashOfConfig":"6"},{"size":3256,"mtime":1693949476551,"results":"8","hashOfConfig":"6"},{"size":292,"mtime":1693943791705,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pgokqw",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/timlehnert/Desktop/13-workout-timer/src/index.js",[],[],"/Users/timlehnert/Desktop/13-workout-timer/src/App.js",[],[],"/Users/timlehnert/Desktop/13-workout-timer/src/Calculator.js",["23"],[],"import { useState, memo, useEffect, useCallback } from \"react\";\nimport clickSound from \"./ClickSound.m4a\";\n\nfunction Calculator({ workouts, allowSound }) {\n  const [number, setNumber] = useState(workouts.at(0).numExercises);\n  const [sets, setSets] = useState(3);\n  const [speed, setSpeed] = useState(90);\n  const [durationBreak, setDurationBreak] = useState(5);\n\n  const [duration, setDuration] = useState(0);\n\n  // const playSound = useCallback(\n  //   function () {\n  //     if (!allowSound) return;\n  //     const sound = new Audio(clickSound);\n  //     sound.play();\n  //   },\n  //   [allowSound]\n  // );\n\n  useEffect(\n    function () {\n      setDuration((number * sets * speed) / 60 + (sets - 1) * durationBreak);\n    },\n    [number, sets, speed, durationBreak]\n  );\n\n  useEffect(\n    function () {\n      const playSound = function () {\n        if (!allowSound) return;\n        const sound = new Audio(clickSound);\n        sound.play();\n      };\n      playSound();\n    },\n    [duration, allowSound]\n  );\n\n  useEffect(\n    function () {\n      document.title = `Your ${number}-exercise workout`;\n    },\n    [number]\n  );\n\n  // const duration = (number * sets * speed) / 60 + (sets - 1) * durationBreak;\n  const mins = Math.floor(duration);\n  const seconds = (duration - mins) * 60;\n\n  function handleInc() {\n    setDuration((duration) => Math.floor(duration) + 1);\n  }\n  function handleDec() {\n    setDuration((duration) => (duration > 1 ? Math.ceil(duration) - 1 : 0));\n  }\n\n  return (\n    <>\n      <form>\n        <div>\n          <label>Type of workout</label>\n          <select value={number} onChange={(e) => setNumber(+e.target.value)}>\n            {workouts.map((workout) => (\n              <option value={workout.numExercises} key={workout.name}>\n                {workout.name} ({workout.numExercises} exercises)\n              </option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <label>How many sets?</label>\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"5\"\n            value={sets}\n            onChange={(e) => setSets(e.target.value)}\n          />\n          <span>{sets}</span>\n        </div>\n        <div>\n          <label>How fast are you?</label>\n          <input\n            type=\"range\"\n            min=\"30\"\n            max=\"180\"\n            step=\"30\"\n            value={speed}\n            onChange={(e) => setSpeed(e.target.value)}\n          />\n          <span>{speed} sec/exercise</span>\n        </div>\n        <div>\n          <label>Break length</label>\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"10\"\n            value={durationBreak}\n            onChange={(e) => {\n              setDurationBreak(e.target.value);\n              setDuration(\n                (number * sets * speed) / 60 + (sets - 1) * e.target.value\n              );\n            }}\n          />\n          <span>{durationBreak} minutes/break</span>\n        </div>\n      </form>\n      <section>\n        <button onClick={handleDec}>â€“</button>\n        <p>\n          {mins < 10 && \"0\"}\n          {mins}:{seconds < 10 && \"0\"}\n          {seconds}\n        </p>\n        <button onClick={handleInc}>+</button>\n      </section>\n    </>\n  );\n}\n\nexport default memo(Calculator);\n","/Users/timlehnert/Desktop/13-workout-timer/src/ToggleSounds.js",[],[],{"ruleId":"24","severity":1,"message":"25","line":1,"column":37,"nodeType":"26","messageId":"27","endLine":1,"endColumn":48},"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar"]